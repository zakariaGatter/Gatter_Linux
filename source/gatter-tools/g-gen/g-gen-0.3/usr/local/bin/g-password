#!/bin/bash 

ALPHA=$(echo {A..Z} {a..z})
NUMBER=$(echo {0..9})
PUNCT=$(echo '& " \' \( \- \_ \) \= \$ \^ \! \: \; \, \/ \. \? \% \+ \} \] \@ \` \| \[ \{ \# \~ \')
ALNUM=$(echo $ALPHA $NUMBER)
ALL=$(echo $ALNUM $PUNCT)

XER () { 
    printf "[ %0.4d ]: %s \n" "$LINENO" "$1"
}

DEP=0
for _D in /usr/bin/shuf; do
    [ -x "$_D" ] || {
        XER "You Need to install $_D before run this script"
        DEP=$(( $DEP + 1 )) 
    }
done

[ "$DEP" -eq 0 ] || exit 1

[ "$#" -gt 2 ] && {
    XER "To many argument(s), please see help for more information" && exit 1
    }

_VERSION_="21-04-2018"

USAGE () {
echo "
        PASS_GEN ($_VERSION_)
        Written by Zakaria Barkouk (zakaria.gatter@gmail.com)

        Generate a Complex Password randomly .
SYNTAX:     pass_gen [OPTS] [NUM]

OPTS:       
        +-------+---------------------+
        | OPTS  | WHAT IT'S INCLUDE   |
        +-------+---------------------+
        | alpha | [a-z][A-Z]          |
        | num   | [0-9]               |
        | punct | [&'...%^]           |
        | alnum | alpha & num         |
        | all   | alpha & num & punct |
        | help  | See this MSG        |
        +-------+---------------------+

EXAMPLE :   pass_gen alpha 8
"
exit 0
}

case "$1" in 
    alpha )
	_GEN_CARS="$ALPHA"
	_NUM_=$2
	;;
    alnum )
	_GEN_CARS="$ALNUM"
	_NUM_=$2
	;;
    num )
	_GEN_CARS="$NUMBER"
	_NUM_=$2
	;;
    punct )
	_GEN_CARS="$PUNCT"
	_NUM_=$2
	;;
    all )
	_GEN_CARS="$ALL"
	_NUM_=$2
	;;
    help )
	USAGE
	;;
    *)
	XER "Incorrect argument(s) specified, please see help for more information"
        exit 1
	;;
esac

_GEN_NUM="0"
while true ; do 
    _PASS_+=$(echo "${_GEN_CARS}" | tr " " "\n" | shuf -n1)

    _GEN_NUM=$(( $_GEN_NUM + 1 ))

    [ "$_GEN_NUM" -eq "$_NUM_" ] && break
done

echo "${_PASS_}"


